C51 COMPILER V9.60.0.0   MAIN                                                              01/05/2021 11:50:25 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\SoftWare\Keil\C51\BIN\C51.EXE ..\user\main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.
                    -\Listings\main.lst) OBJECT(.\Objects\main.obj)

line level    source

   1          //ISP-Slave
   2          
   3          #define ALLOCATE_EXTERN
   4          #include "HC89S003F4.h"
   5          
   6          unsigned char guc_ReceiveValue = 0;             //SPI Receive Data
   7          unsigned char SPI_ReadData();                   //SPI Read Data
   8          
   9          /***************************************************************************************
  10            * @Function  The master always sends data 0xAA to the slave, and the slave sends the received data to th
             -e host computer through the serial port
  11            * @Steps     IO connection£ºP0_0-->P0_0 P0_1-->P0_1 P2_0-->P2_0        
  12          ***************************************************************************************/
  13          void main()
  14          {
  15   1      /************************************System initialization ****************************************/
  16   1              WDTCCR = 0x00;                                          //Close watchdog
  17   1                                        //In this example, the watchdog is closed for the convenience of testing. 
  18   1                                        //In practical use, it is recommended to open the watchdog. See WDT Reset examp
             -le for details
  19   1              
  20   1              CLKSWR = 0x51;                                          //Select internal RC32M as system clock, RC32M/2, Fosc=16MHz
  21   1              CLKDIV = 0x01;                                          //Fosc/1,Fcpu=16MHz
  22   1      /**********************************UART initialization**************************************/
  23   1              P2M0 = P2M0&0x0F|0x80;                      //Set P21 as push-pull output
  24   1              P0M1 = P0M1&0x0F|0x20;                          //Set P03 as pull-up input
  25   1              TXD_MAP = 0x21;                                         //TXD mapping P21
  26   1              RXD_MAP = 0x03;                                     //RXD mapping P03           
  27   1              T4CON = 0x06;                                           //T4 working mode: UART1 baud rate generator
  28   1          TH4 = 0xFF; 
  29   1              TL4 = 0x98;                                                     //Baud rate 9600
  30   1              SCON2 = 0x02;                                           //8-Bit UART, variable baud rate
  31   1              SCON = 0x10;                                            //Allow UART to receive
  32   1              IE |= 0x10;                                                     //Turn on UART Interrupt
  33   1      /************************************SPI initialization*****************************************/
  34   1          P0M0 = P0M0&0x0F|0x80;              //Set P01 as push-pull output
  35   1          P0M0 = P0M0&0xF0|0x04;              //Set P00 as SMT input
  36   1          P2M0 = P2M0&0xF0|0x04;              //Set P20 as SMT input
  37   1              MISO_MAP = 0x01;                        //SPI_MISO mapping P01
  38   1              MOSI_MAP = 0x00;                        //SPI_MOSI mapping P00
  39   1              SCK_MAP = 0x20;                         //SPI_SCK mapping P20
  40   1              SPDAT = 0x00;                       //Data Register write 0
  41   1              SPSTAT = 0x00;                      //Clear the status Register to 0         
  42   1              SPCTL = 0xC7;                       //Slave mode, clock divided by 128
  43   1          IE1 |= 0x01;                                            //Open SPI Interrupt
  44   1          EA = 1;    
  45   1       
  46   1              while(1)
  47   1          {
  48   2                      EA = 0;    
  49   2                      SBUF = 0xBB;                                              //Send 8-Bit serial Data
  50   2                      while(!(SCON & 0x02));
  51   2                      SCON &=~ 0x02;                                            //Clear send-flag Bit
  52   2                      SBUF = guc_ReceiveValue;                          //Send 8-Bit serial Data
C51 COMPILER V9.60.0.0   MAIN                                                              01/05/2021 11:50:25 PAGE 2   

  53   2                      while(!(SCON & 0x02));
  54   2                      SCON &=~ 0x02;                                            //Clear send-flag Bit
  55   2                      EA = 1;   
  56   2          }   
  57   1      }
  58          
  59          /***************************************************************************************
  60           SPI interrupt service function
  61          ***************************************************************************************/
  62          void SPI_Rpt(void) interrupt SPI_VECTOR
  63          {
  64   1              SPSTAT |= 0x80;                                                    //Clear flag Bit     
  65   1              guc_ReceiveValue = SPI_ReadData();                 //Read Data
  66   1      }
  67          
  68          /**
  69            * SPI read functions
  70            * SPI read data
  71            */
  72          unsigned char SPI_ReadData()
  73          {
  74   1              return SPDAT;                                                      //Return Data
  75   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    208    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
