C51 COMPILER V9.60.0.0   MAIN                                                              01/05/2021 11:36:44 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\SoftWare\Keil\C51\BIN\C51.EXE ..\user\main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.
                    -\Listings\main.lst) OBJECT(.\Objects\main.obj)

line level    source

   1          
   2          //cyclic redundancy check
   3          
   4          #define ALLOCATE_EXTERN
   5          #include "HC89S003F4.h"
   6          #include "string.h"
   7          
   8          unsigned int CRC_CalcCRC(unsigned char *fucp_CheckArr,unsigned int fui_CheckLen);//write the data to be ch
             -ecked and return the check value
   9          
  10          unsigned char guc_UARTFlag;                               //UART flag bit
  11          unsigned char guc_UARTCnt;                              //count the number of urat usage
  12          unsigned char guc_UARTbuf_a[5];                 //received data
  13          unsigned char guc_i;                                          //count the number of data sent   
  14          unsigned int  gui_CrcResault;                     //CRC check value
  15          unsigned char guc_CrcValue_a[2];                //CRC check send value
  16          unsigned char guc_CrcCnt;                                   //count the number of CRC data
  17          
  18          /**************************************************************************************
  19            * @Function     Five 8-bit data are sent to MCU through PC, and MCU returns CRC check value
  20            * @Operation  Connect RXD and TXD short-circuit caps, send 5 8-bit data to MCU, and MCU returns CRC chec
             -k value
  21          **************************************************************************************/
  22          void main()
  23          {
  24   1      /************************************system initialization ****************************************/
  25   1              WDTCCR = 0x00;                                          //Close watchdog
  26   1                                        //In this example, the watchdog is closed for the convenience of testing. 
  27   1                                        //In practical use, it is recommended to open the watchdog. See WDT Reset examp
             -le for details
  28   1              
  29   1              CLKSWR = 0x51;                                          //Select internal RC32M as system clock, RC32M/2, Fosc=16MHz
  30   1              CLKDIV = 0x01;                                          //Fosc/1,Fcpu=16MHz  
  31   1      /*************************************************************************************************/
  32   1              P2M0 = P2M0&0x0F|0x80;                  //Set P21 as push-pull output
  33   1              P0M1 = P0M1&0x0F|0x20;                  //SEt P03 as pull-up input
  34   1              TXD_MAP = 0x21;                                           //TXD mapping P21
  35   1              RXD_MAP = 0x03;                                           //RXD mapping P03             
  36   1              T4CON = 0x06;                                               //T4 mode£ºUART1 Baud rate generato
  37   1        TH4 = 0xFF; 
  38   1              TL4 = 0x98;                                                         //Baud = 9600
  39   1              SCON2 = 0x02;                                               //8 bit UART£¬Baud rate is not fixed
  40   1              SCON = 0x10;                                                //enable serial receive 
  41   1              IE |= 0X10;                                                         //enable serial port interrupt
  42   1      /**********************************CRC initialization***************************************/
  43   1              CRCC = 0x07;                                          //LSB first£¬The initial value after reset is 0xFFFF,Reset CRC calculator
  44   1      
  45   1              EA = 1;
  46   1      
  47   1              while(1)
  48   1              {
  49   2                      if(guc_UARTFlag)
  50   2                      {
  51   3                              IE &=~ 0x10;                                                 //Disable UART1 interrupt
C51 COMPILER V9.60.0.0   MAIN                                                              01/05/2021 11:36:44 PAGE 2   

  52   3                              gui_CrcResault = CRC_CalcCRC(guc_UARTbuf_a,sizeof(guc_UARTbuf_a));      
  53   3                                                                                                                 //write the data to be checked and return the check value
  54   3                              memcpy(guc_CrcValue_a,&gui_CrcResault,2);//memory copy function
  55   3                              for(guc_i = 0;guc_i< 2;guc_i++)
  56   3                              {
  57   4                                      SBUF = guc_CrcValue_a[guc_i];          //Sending 8-bit serial data
  58   4                                      while(!(SCON & 0x02));
  59   4                                      SCON &=~ 0x02;                                     //Clear flag bit
  60   4                              }
  61   3                              CRCC = 0x07;                                                 //LSB first£¬The initial value after reset is 0xFFFF,Reset CRC cal
             -culator
  62   3                              IE |= 0x10;                                                          //enable UART1 interrupt
  63   3                              guc_UARTFlag = 0;                                          //Clear flag bit
  64   3                              guc_UARTCnt = 0;                                           //Clear count
  65   3                              SCON |= 0x10;                                                //enable UART1 receive
  66   3                      }       
  67   2              }
  68   1      }
  69          
  70          /***************************************************************************************
  71             UART1 interrupt service function
  72          ***************************************************************************************/
  73          void UART1_Rpt(void) interrupt UART1_VECTOR
  74          {
  75   1              if(SCON&0x01)
  76   1              {       
  77   2                      guc_UARTbuf_a[guc_UARTCnt++] = SBUF;  //8-bit data received by serial port
  78   2                      if(guc_UARTCnt >= 5)
  79   2                      {
  80   3                              SCON &=~ 0x10;                                  //Disable UART1 receive
  81   3                              guc_UARTFlag = 1;
  82   3                      }
  83   2                      SCON &=~ 0x01;                                          //Clear interrupt flag bit
  84   2              }                                                                       
  85   1      }
  86          
  87          /**
  88            * @Function   write the data to be checked and return the check value
  89            * @Argument   *fucp_CheckArr : CRC data first address
  90            * @Argument   fui_CheckLen : CRC data length
  91            *             Value range 0 - 65535
  92            * @Return     CRC result
  93                                          LSB first , MSB last
  94            */
  95          unsigned int CRC_CalcCRC(unsigned char *fucp_CheckArr,unsigned int fui_CheckLen)
  96          {
  97   1              while(fui_CheckLen--)CRCL = *(fucp_CheckArr++);
  98   1              return CRCR;
  99   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    260    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     13       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
