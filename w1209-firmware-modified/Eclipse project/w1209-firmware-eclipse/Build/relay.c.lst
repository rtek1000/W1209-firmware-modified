                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module relay
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _getParamById
                                     12 	.globl _getTemperature
                                     13 	.globl _initRelay
                                     14 	.globl _setRelay
                                     15 	.globl _refreshRelay
                                     16 ;--------------------------------------------------------
                                     17 ; ram data
                                     18 ;--------------------------------------------------------
                                     19 	.area DATA
      000000                         20 _timer:
      000000                         21 	.ds 2
      000002                         22 _state:
      000002                         23 	.ds 1
                                     24 ;--------------------------------------------------------
                                     25 ; ram data
                                     26 ;--------------------------------------------------------
                                     27 	.area INITIALIZED
                                     28 ;--------------------------------------------------------
                                     29 ; absolute external ram data
                                     30 ;--------------------------------------------------------
                                     31 	.area DABS (ABS)
                                     32 
                                     33 ; default segment ordering for linker
                                     34 	.area HOME
                                     35 	.area GSINIT
                                     36 	.area GSFINAL
                                     37 	.area CONST
                                     38 	.area INITIALIZER
                                     39 	.area CODE
                                     40 
                                     41 ;--------------------------------------------------------
                                     42 ; global & static initialisations
                                     43 ;--------------------------------------------------------
                                     44 	.area HOME
                                     45 	.area GSINIT
                                     46 	.area GSFINAL
                                     47 	.area GSINIT
                                     48 ;--------------------------------------------------------
                                     49 ; Home
                                     50 ;--------------------------------------------------------
                                     51 	.area HOME
                                     52 	.area HOME
                                     53 ;--------------------------------------------------------
                                     54 ; code
                                     55 ;--------------------------------------------------------
                                     56 	.area CODE
                                     57 ;	./relay.c: 38: void initRelay()
                                     58 ;	-----------------------------------------
                                     59 ;	 function initRelay
                                     60 ;	-----------------------------------------
      000000                         61 _initRelay:
                                     62 ;	./relay.c: 40: PA_DDR |= RELAY_BIT;
      000000 72 16 50 02      [ 1]   63 	bset	20482, #3
                                     64 ;	./relay.c: 41: PA_CR1 |= RELAY_BIT;
      000004 72 16 50 03      [ 1]   65 	bset	20483, #3
                                     66 ;	./relay.c: 42: timer = 0;
      000008 5F               [ 1]   67 	clrw	x
      000009 CFu00u00         [ 2]   68 	ldw	_timer+0, x
                                     69 ;	./relay.c: 43: state = false;
      00000C 72 5Fu00u02      [ 1]   70 	clr	_state+0
                                     71 ;	./relay.c: 44: }
      000010 81               [ 4]   72 	ret
                                     73 ;	./relay.c: 50: void setRelay (bool on)
                                     74 ;	-----------------------------------------
                                     75 ;	 function setRelay
                                     76 ;	-----------------------------------------
      000011                         77 _setRelay:
                                     78 ;	./relay.c: 53: RELAY_PORT |= RELAY_BIT;
      000011 C6 50 00         [ 1]   79 	ld	a, 0x5000
                                     80 ;	./relay.c: 52: if (on) {
      000014 0D 03            [ 1]   81 	tnz	(0x03, sp)
      000016 27 06            [ 1]   82 	jreq	00102$
                                     83 ;	./relay.c: 53: RELAY_PORT |= RELAY_BIT;
      000018 AA 08            [ 1]   84 	or	a, #0x08
      00001A C7 50 00         [ 1]   85 	ld	0x5000, a
      00001D 81               [ 4]   86 	ret
      00001E                         87 00102$:
                                     88 ;	./relay.c: 55: RELAY_PORT &= ~RELAY_BIT;
      00001E A4 F7            [ 1]   89 	and	a, #0xf7
      000020 C7 50 00         [ 1]   90 	ld	0x5000, a
                                     91 ;	./relay.c: 58: }
      000023 81               [ 4]   92 	ret
                                     93 ;	./relay.c: 64: void refreshRelay()
                                     94 ;	-----------------------------------------
                                     95 ;	 function refreshRelay
                                     96 ;	-----------------------------------------
      000024                         97 _refreshRelay:
      000024 52 0A            [ 2]   98 	sub	sp, #10
                                     99 ;	./relay.c: 66: bool mode = getParamById (PARAM_RELAY_MODE);
      000026 4B 00            [ 1]  100 	push	#0x00
      000028 CDr00r00         [ 4]  101 	call	_getParamById
      00002B 84               [ 1]  102 	pop	a
      00002C 50               [ 2]  103 	negw	x
      00002D 4F               [ 1]  104 	clr	a
      00002E 49               [ 1]  105 	rlc	a
                                    106 ;	./relay.c: 77: setRelay (!mode);
      00002F 6B 01            [ 1]  107 	ld	(0x01, sp), a
      000031 A8 01            [ 1]  108 	xor	a, #0x01
      000033 6B 02            [ 1]  109 	ld	(0x02, sp), a
                                    110 ;	./relay.c: 68: if (state) { // Relay state is enabled
      000035 72 00u00u02 02   [ 2]  111 	btjt	_state+0, #0, 00143$
      00003A 20 61            [ 2]  112 	jra	00114$
      00003C                        113 00143$:
                                    114 ;	./relay.c: 69: if (getTemperature() < (getParamById (PARAM_THRESHOLD)
      00003C CDr00r00         [ 4]  115 	call	_getTemperature
      00003F 1F 03            [ 2]  116 	ldw	(0x03, sp), x
      000041 4B 09            [ 1]  117 	push	#0x09
      000043 CDr00r00         [ 4]  118 	call	_getParamById
      000046 84               [ 1]  119 	pop	a
      000047 1F 05            [ 2]  120 	ldw	(0x05, sp), x
                                    121 ;	./relay.c: 70: - (getParamById (PARAM_RELAY_HYSTERESIS) >> 3) ) ) {
      000049 4B 01            [ 1]  122 	push	#0x01
      00004B CDr00r00         [ 4]  123 	call	_getParamById
      00004E 84               [ 1]  124 	pop	a
      00004F 57               [ 2]  125 	sraw	x
      000050 57               [ 2]  126 	sraw	x
      000051 57               [ 2]  127 	sraw	x
      000052 1F 07            [ 2]  128 	ldw	(0x07, sp), x
      000054 1E 05            [ 2]  129 	ldw	x, (0x05, sp)
      000056 72 F0 07         [ 2]  130 	subw	x, (0x07, sp)
      000059 1F 09            [ 2]  131 	ldw	(0x09, sp), x
      00005B 1E 03            [ 2]  132 	ldw	x, (0x03, sp)
      00005D 13 09            [ 2]  133 	cpw	x, (0x09, sp)
      00005F 2E 2F            [ 1]  134 	jrsge	00105$
                                    135 ;	./relay.c: 71: timer++;
      000061 CEu00u00         [ 2]  136 	ldw	x, _timer+0
      000064 5C               [ 1]  137 	incw	x
      000065 CFu00u00         [ 2]  138 	ldw	_timer+0, x
                                    139 ;	./relay.c: 73: if ( (getParamById (PARAM_RELAY_DELAY) << RELAY_TIMER_MULTIPLIER) < timer) {
      000068 4B 05            [ 1]  140 	push	#0x05
      00006A CDr00r00         [ 4]  141 	call	_getParamById
      00006D 84               [ 1]  142 	pop	a
      00006E 58               [ 2]  143 	sllw	x
      00006F 58               [ 2]  144 	sllw	x
      000070 58               [ 2]  145 	sllw	x
      000071 58               [ 2]  146 	sllw	x
      000072 58               [ 2]  147 	sllw	x
      000073 58               [ 2]  148 	sllw	x
      000074 58               [ 2]  149 	sllw	x
      000075 C3u00u00         [ 2]  150 	cpw	x, _timer+0
      000078 24 0D            [ 1]  151 	jrnc	00102$
                                    152 ;	./relay.c: 74: state = false;
      00007A 72 5Fu00u02      [ 1]  153 	clr	_state+0
                                    154 ;	./relay.c: 75: setRelay (mode);
      00007E 7B 01            [ 1]  155 	ld	a, (0x01, sp)
      000080 88               [ 1]  156 	push	a
      000081 CDr00r11         [ 4]  157 	call	_setRelay
      000084 84               [ 1]  158 	pop	a
      000085 20 6D            [ 2]  159 	jra	00116$
      000087                        160 00102$:
                                    161 ;	./relay.c: 77: setRelay (!mode);
      000087 7B 02            [ 1]  162 	ld	a, (0x02, sp)
      000089 88               [ 1]  163 	push	a
      00008A CDr00r11         [ 4]  164 	call	_setRelay
      00008D 84               [ 1]  165 	pop	a
      00008E 20 64            [ 2]  166 	jra	00116$
      000090                        167 00105$:
                                    168 ;	./relay.c: 80: timer = 0;
      000090 5F               [ 1]  169 	clrw	x
      000091 CFu00u00         [ 2]  170 	ldw	_timer+0, x
                                    171 ;	./relay.c: 81: setRelay (!mode);
      000094 7B 02            [ 1]  172 	ld	a, (0x02, sp)
      000096 88               [ 1]  173 	push	a
      000097 CDr00r11         [ 4]  174 	call	_setRelay
      00009A 84               [ 1]  175 	pop	a
      00009B 20 57            [ 2]  176 	jra	00116$
      00009D                        177 00114$:
                                    178 ;	./relay.c: 84: if (getTemperature() > (getParamById (PARAM_THRESHOLD)
      00009D CDr00r00         [ 4]  179 	call	_getTemperature
      0000A0 1F 07            [ 2]  180 	ldw	(0x07, sp), x
      0000A2 4B 09            [ 1]  181 	push	#0x09
      0000A4 CDr00r00         [ 4]  182 	call	_getParamById
      0000A7 84               [ 1]  183 	pop	a
      0000A8 1F 09            [ 2]  184 	ldw	(0x09, sp), x
                                    185 ;	./relay.c: 85: + (getParamById (PARAM_RELAY_HYSTERESIS) >> 3) ) ) {
      0000AA 4B 01            [ 1]  186 	push	#0x01
      0000AC CDr00r00         [ 4]  187 	call	_getParamById
      0000AF 84               [ 1]  188 	pop	a
      0000B0 57               [ 2]  189 	sraw	x
      0000B1 57               [ 2]  190 	sraw	x
      0000B2 57               [ 2]  191 	sraw	x
      0000B3 72 FB 09         [ 2]  192 	addw	x, (0x09, sp)
      0000B6 13 07            [ 2]  193 	cpw	x, (0x07, sp)
      0000B8 2E 2F            [ 1]  194 	jrsge	00111$
                                    195 ;	./relay.c: 86: timer++;
      0000BA CEu00u00         [ 2]  196 	ldw	x, _timer+0
      0000BD 5C               [ 1]  197 	incw	x
      0000BE CFu00u00         [ 2]  198 	ldw	_timer+0, x
                                    199 ;	./relay.c: 88: if ( (getParamById (PARAM_RELAY_DELAY) << RELAY_TIMER_MULTIPLIER) < timer) {
      0000C1 4B 05            [ 1]  200 	push	#0x05
      0000C3 CDr00r00         [ 4]  201 	call	_getParamById
      0000C6 84               [ 1]  202 	pop	a
      0000C7 58               [ 2]  203 	sllw	x
      0000C8 58               [ 2]  204 	sllw	x
      0000C9 58               [ 2]  205 	sllw	x
      0000CA 58               [ 2]  206 	sllw	x
      0000CB 58               [ 2]  207 	sllw	x
      0000CC 58               [ 2]  208 	sllw	x
      0000CD 58               [ 2]  209 	sllw	x
      0000CE C3u00u00         [ 2]  210 	cpw	x, _timer+0
      0000D1 24 0D            [ 1]  211 	jrnc	00108$
                                    212 ;	./relay.c: 89: state = true;
      0000D3 35 01u00u02      [ 1]  213 	mov	_state+0, #0x01
                                    214 ;	./relay.c: 90: setRelay (!mode);
      0000D7 7B 02            [ 1]  215 	ld	a, (0x02, sp)
      0000D9 88               [ 1]  216 	push	a
      0000DA CDr00r11         [ 4]  217 	call	_setRelay
      0000DD 84               [ 1]  218 	pop	a
      0000DE 20 14            [ 2]  219 	jra	00116$
      0000E0                        220 00108$:
                                    221 ;	./relay.c: 92: setRelay (mode);
      0000E0 7B 01            [ 1]  222 	ld	a, (0x01, sp)
      0000E2 88               [ 1]  223 	push	a
      0000E3 CDr00r11         [ 4]  224 	call	_setRelay
      0000E6 84               [ 1]  225 	pop	a
      0000E7 20 0B            [ 2]  226 	jra	00116$
      0000E9                        227 00111$:
                                    228 ;	./relay.c: 95: timer = 0;
      0000E9 5F               [ 1]  229 	clrw	x
      0000EA CFu00u00         [ 2]  230 	ldw	_timer+0, x
                                    231 ;	./relay.c: 96: setRelay (mode);
      0000ED 7B 01            [ 1]  232 	ld	a, (0x01, sp)
      0000EF 88               [ 1]  233 	push	a
      0000F0 CDr00r11         [ 4]  234 	call	_setRelay
      0000F3 84               [ 1]  235 	pop	a
      0000F4                        236 00116$:
                                    237 ;	./relay.c: 99: }
      0000F4 5B 0A            [ 2]  238 	addw	sp, #10
      0000F6 81               [ 4]  239 	ret
                                    240 	.area CODE
                                    241 	.area CONST
                                    242 	.area INITIALIZER
                                    243 	.area CABS (ABS)
